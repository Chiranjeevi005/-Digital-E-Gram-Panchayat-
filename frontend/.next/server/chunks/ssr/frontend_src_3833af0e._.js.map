{"version":3,"sources":["turbopack:///[project]/frontend/src/lib/api.ts","turbopack:///[project]/frontend/src/app/test-api/page.tsx"],"sourcesContent":["// API client for making requests to the backend\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002/api';\r\n\r\n// Get token from localStorage or sessionStorage\r\nconst getToken = () => {\r\n  if (typeof window !== 'undefined') {\r\n    return localStorage.getItem('token') || sessionStorage.getItem('token');\r\n  }\r\n  return null;\r\n};\r\n\r\n// Define types for API responses\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  userType: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\ninterface RegisterResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\n// Define a generic type for API responses\r\ntype ApiResponse<T = unknown> = Promise<T>;\r\n\r\n// Helper function to handle fetch errors\r\nconst handleFetchError = async (response: Response) => {\r\n  if (!response.ok) {\r\n    let errorMessage = `HTTP error! status: ${response.status}`;\r\n    try {\r\n      const errorData = await response.json();\r\n      errorMessage = errorData.message || errorMessage;\r\n    } catch (e) {\r\n      // If we can't parse JSON, use the status text\r\n      errorMessage = response.statusText || errorMessage;\r\n    }\r\n    throw new Error(errorMessage);\r\n  }\r\n  return response;\r\n};\r\n\r\nexport const apiClient = {\r\n  // Generic GET request\r\n  get: async <T = unknown>(endpoint: string): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API GET request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic POST request\r\n  post: async <T = unknown>(endpoint: string, data: Record<string, unknown>): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        body: JSON.stringify(data),\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API POST request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic PUT request\r\n  put: async <T = unknown>(endpoint: string, data: Record<string, unknown>): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        body: JSON.stringify(data),\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API PUT request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic DELETE request\r\n  delete: async <T = unknown>(endpoint: string): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API DELETE request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // File download request\r\n  download: async (endpoint: string): Promise<Blob> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        headers: {\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.blob();\r\n    } catch (error) {\r\n      console.error('API download request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Login method\r\n  login: async (email: string, password: string, userType: string): Promise<LoginResponse> => {\r\n    return apiClient.post<LoginResponse>('/auth/login', { email, password, userType });\r\n  },\r\n\r\n  // Register method\r\n  register: async (name: string, email: string, password: string): Promise<RegisterResponse> => {\r\n    return apiClient.post<RegisterResponse>('/auth/register', { name, email, password });\r\n  },\r\n\r\n  // Get current user\r\n  getCurrentUser: async (): Promise<User> => {\r\n    return apiClient.get<User>('/auth/user/me');\r\n  }\r\n};","'use client';\n\nimport React, { useState } from 'react';\nimport { apiClient } from '../../lib/api';\n\ninterface ApplyResponse {\n  success: boolean;\n  applicationId?: string;\n  message?: string;\n  status?: string;\n  downloadUrl?: string;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  userType: string;\n}\n\nconst TestAPIPage = () => {\n  const [result, setResult] = useState<Record<string, unknown> | ApplyResponse | User | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const testGetUser = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const userData: User = await apiClient.getCurrentUser();\n      setResult(userData);\n    } catch (err: unknown) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch user data';\n      setError(errorMessage);\n      console.error('Error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const testApplyCertificate = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response: ApplyResponse = await apiClient.post<ApplyResponse>('/certificates/apply', {\n        applicantName: 'Test User',\n        certificateType: 'Birth',\n        date: '2023-01-01',\n        place: 'Test Place',\n        supportingFiles: [],\n        declaration: true\n      });\n      setResult(response);\n    } catch (err: unknown) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to apply for certificate';\n      setError(errorMessage);\n      console.error('Error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1>API Test Page</h1>\n      <div style={{ marginBottom: '20px' }}>\n        <button \n          onClick={testGetUser}\n          disabled={loading}\n          style={{ padding: '10px 20px', marginRight: '10px' }}\n        >\n          {loading ? 'Loading...' : 'Test Get User'}\n        </button>\n        <button \n          onClick={testApplyCertificate}\n          disabled={loading}\n          style={{ padding: '10px 20px' }}\n        >\n          {loading ? 'Loading...' : 'Test Apply Certificate'}\n        </button>\n      </div>\n      \n      {error && (\n        <div style={{ \n          backgroundColor: '#fee', \n          color: '#c33', \n          padding: '10px', \n          borderRadius: '4px',\n          marginBottom: '20px'\n        }}>\n          <strong>Error:</strong> {error}\n        </div>\n      )}\n      \n      {result && (\n        <div style={{ \n          backgroundColor: '#efe', \n          color: '#363', \n          padding: '10px', \n          borderRadius: '4px'\n        }}>\n          <strong>Result:</strong>\n          <pre>{JSON.stringify(result, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TestAPIPage;"],"names":[],"mappings":"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"}