{"version":3,"sources":["turbopack:///[project]/frontend/src/lib/api.ts","turbopack:///[project]/frontend/src/app/test-auth/page.tsx"],"sourcesContent":["// API client for making requests to the backend\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002/api';\r\n\r\n// Get token from localStorage or sessionStorage\r\nconst getToken = () => {\r\n  if (typeof window !== 'undefined') {\r\n    return localStorage.getItem('token') || sessionStorage.getItem('token');\r\n  }\r\n  return null;\r\n};\r\n\r\n// Define types for API responses\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  userType: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\ninterface RegisterResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\n// Define a generic type for API responses\r\ntype ApiResponse<T = unknown> = Promise<T>;\r\n\r\n// Helper function to handle fetch errors\r\nconst handleFetchError = async (response: Response) => {\r\n  if (!response.ok) {\r\n    let errorMessage = `HTTP error! status: ${response.status}`;\r\n    try {\r\n      const errorData = await response.json();\r\n      errorMessage = errorData.message || errorMessage;\r\n    } catch (e) {\r\n      // If we can't parse JSON, use the status text\r\n      errorMessage = response.statusText || errorMessage;\r\n    }\r\n    throw new Error(errorMessage);\r\n  }\r\n  return response;\r\n};\r\n\r\nexport const apiClient = {\r\n  // Generic GET request\r\n  get: async <T = unknown>(endpoint: string): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API GET request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic POST request\r\n  post: async <T = unknown>(endpoint: string, data: Record<string, unknown>): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        body: JSON.stringify(data),\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API POST request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic PUT request\r\n  put: async <T = unknown>(endpoint: string, data: Record<string, unknown>): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        body: JSON.stringify(data),\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API PUT request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic DELETE request\r\n  delete: async <T = unknown>(endpoint: string): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API DELETE request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // File download request\r\n  download: async (endpoint: string): Promise<Blob> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        headers: {\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.blob();\r\n    } catch (error) {\r\n      console.error('API download request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Login method\r\n  login: async (email: string, password: string, userType: string): Promise<LoginResponse> => {\r\n    return apiClient.post<LoginResponse>('/auth/login', { email, password, userType });\r\n  },\r\n\r\n  // Register method\r\n  register: async (name: string, email: string, password: string): Promise<RegisterResponse> => {\r\n    return apiClient.post<RegisterResponse>('/auth/register', { name, email, password });\r\n  },\r\n\r\n  // Get current user\r\n  getCurrentUser: async (): Promise<User> => {\r\n    return apiClient.get<User>('/auth/user/me');\r\n  }\r\n};","'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { apiClient } from '../../lib/api';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  userType: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\ninterface RegisterResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\nexport default function TestAuthPage() {\r\n  const [result, setResult] = useState<Record<string, unknown> | RegisterResponse | LoginResponse | User | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const testRegister = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res: RegisterResponse = await apiClient.register('Test User', 'test@example.com', 'password123');\r\n      setResult(res);\r\n    } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      setResult({ error: errorMessage });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const testLogin = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res: LoginResponse = await apiClient.login('test@example.com', 'password123', 'Citizen');\r\n      setResult(res);\r\n    } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      setResult({ error: errorMessage });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const testGetCurrentUser = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res: User = await apiClient.getCurrentUser();\r\n      setResult(res);\r\n    } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\r\n      setResult({ error: errorMessage });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-100 flex items-center justify-center\">\r\n      <div className=\"bg-white p-8 rounded-lg shadow-md w-full max-w-md\">\r\n        <h1 className=\"text-2xl font-bold mb-6 text-center\">Auth Test Page</h1>\r\n        \r\n        <div className=\"space-y-4\">\r\n          <button\r\n            onClick={testRegister}\r\n            disabled={loading}\r\n            className=\"w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded disabled:opacity-50\"\r\n          >\r\n            Test Register\r\n          </button>\r\n          \r\n          <button\r\n            onClick={testLogin}\r\n            disabled={loading}\r\n            className=\"w-full bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded disabled:opacity-50\"\r\n          >\r\n            Test Login\r\n          </button>\r\n          \r\n          <button\r\n            onClick={testGetCurrentUser}\r\n            disabled={loading}\r\n            className=\"w-full bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded disabled:opacity-50\"\r\n          >\r\n            Test Get Current User\r\n          </button>\r\n        </div>\r\n        \r\n        {loading && (\r\n          <div className=\"mt-4 text-center\">\r\n            <p>Loading...</p>\r\n          </div>\r\n        )}\r\n        \r\n        {result && (\r\n          <div className=\"mt-6 p-4 bg-gray-50 rounded\">\r\n            <h2 className=\"font-bold mb-2\">Result:</h2>\r\n            <pre className=\"text-sm overflow-auto\">\r\n              {JSON.stringify(result, null, 2)}\r\n            </pre>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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"}