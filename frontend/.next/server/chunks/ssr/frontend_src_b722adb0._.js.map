{"version":3,"sources":["turbopack:///[project]/frontend/src/lib/api.ts","turbopack:///[project]/frontend/src/app/test-register/page.tsx"],"sourcesContent":["// API client for making requests to the backend\r\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3002/api';\r\n\r\n// Get token from localStorage or sessionStorage\r\nconst getToken = () => {\r\n  if (typeof window !== 'undefined') {\r\n    return localStorage.getItem('token') || sessionStorage.getItem('token');\r\n  }\r\n  return null;\r\n};\r\n\r\n// Define types for API responses\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  userType: string;\r\n}\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\ninterface RegisterResponse {\r\n  token: string;\r\n  user: User;\r\n}\r\n\r\n// Define a generic type for API responses\r\ntype ApiResponse<T = unknown> = Promise<T>;\r\n\r\n// Helper function to handle fetch errors\r\nconst handleFetchError = async (response: Response) => {\r\n  if (!response.ok) {\r\n    let errorMessage = `HTTP error! status: ${response.status}`;\r\n    try {\r\n      const errorData = await response.json();\r\n      errorMessage = errorData.message || errorMessage;\r\n    } catch (e) {\r\n      // If we can't parse JSON, use the status text\r\n      errorMessage = response.statusText || errorMessage;\r\n    }\r\n    throw new Error(errorMessage);\r\n  }\r\n  return response;\r\n};\r\n\r\nexport const apiClient = {\r\n  // Generic GET request\r\n  get: async <T = unknown>(endpoint: string): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API GET request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic POST request\r\n  post: async <T = unknown>(endpoint: string, data: Record<string, unknown>): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        body: JSON.stringify(data),\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API POST request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic PUT request\r\n  put: async <T = unknown>(endpoint: string, data: Record<string, unknown>): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        body: JSON.stringify(data),\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API PUT request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Generic DELETE request\r\n  delete: async <T = unknown>(endpoint: string): ApiResponse<T> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API DELETE request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // File download request\r\n  download: async (endpoint: string): Promise<Blob> => {\r\n    try {\r\n      const token = getToken();\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        headers: {\r\n          ...(token && { 'Authorization': `Bearer ${token}` }),\r\n        },\r\n        // Add timeout and credentials for better error handling\r\n        credentials: 'include',\r\n      });\r\n      \r\n      await handleFetchError(response);\r\n      return response.blob();\r\n    } catch (error) {\r\n      console.error('API download request failed:', error);\r\n      // Provide more specific error messages\r\n      if (error instanceof TypeError && error.message === 'Failed to fetch') {\r\n        throw new Error('Network error: Unable to connect to the server. Please check if the server is running.');\r\n      }\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Login method\r\n  login: async (email: string, password: string, userType: string): Promise<LoginResponse> => {\r\n    return apiClient.post<LoginResponse>('/auth/login', { email, password, userType });\r\n  },\r\n\r\n  // Register method\r\n  register: async (name: string, email: string, password: string): Promise<RegisterResponse> => {\r\n    return apiClient.post<RegisterResponse>('/auth/register', { name, email, password });\r\n  },\r\n\r\n  // Get current user\r\n  getCurrentUser: async (): Promise<User> => {\r\n    return apiClient.get<User>('/auth/user/me');\r\n  }\r\n};","'use client';\n\nimport React, { useState } from 'react';\nimport { apiClient } from '../../lib/api';\n\ninterface RegisterResponse {\n  token: string;\n  user: {\n    id: string;\n    name: string;\n    email: string;\n    userType: string;\n  };\n}\n\nconst TestRegisterPage = () => {\n  const [name, setName] = useState('Test Citizen');\n  const [email, setEmail] = useState('citizen@example.com');\n  const [password, setPassword] = useState('password123');\n  const [result, setResult] = useState<RegisterResponse | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      setLoading(true);\n      setError(null);\n      const response: RegisterResponse = await apiClient.register(name, email, password);\n      setResult(response);\n      \n      // Store token in localStorage\n      if (response.token) {\n        localStorage.setItem('token', response.token);\n      }\n    } catch (err: unknown) {\n      const errorMessage = err instanceof Error ? err.message : 'Registration failed';\n      setError(errorMessage);\n      console.error('Registration error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif', maxWidth: '400px', margin: '0 auto' }}>\n      <h1>Test Registration</h1>\n      <form onSubmit={handleRegister} style={{ marginBottom: '20px' }}>\n        <div style={{ marginBottom: '15px' }}>\n          <label>Name:</label>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n            required\n          />\n        </div>\n        \n        <div style={{ marginBottom: '15px' }}>\n          <label>Email:</label>\n          <input\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n            required\n          />\n        </div>\n        \n        <div style={{ marginBottom: '15px' }}>\n          <label>Password:</label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            style={{ width: '100%', padding: '8px', marginTop: '5px' }}\n            required\n          />\n        </div>\n        \n        <button \n          type=\"submit\"\n          disabled={loading}\n          style={{ padding: '10px 20px', backgroundColor: '#0070f3', color: 'white', border: 'none', borderRadius: '4px' }}\n        >\n          {loading ? 'Registering...' : 'Register'}\n        </button>\n      </form>\n      \n      {error && (\n        <div style={{ \n          backgroundColor: '#fee', \n          color: '#c33', \n          padding: '10px', \n          borderRadius: '4px',\n          marginBottom: '20px'\n        }}>\n          <strong>Error:</strong> {error}\n        </div>\n      )}\n      \n      {result && (\n        <div style={{ \n          backgroundColor: '#efe', \n          color: '#363', \n          padding: '10px', \n          borderRadius: '4px'\n        }}>\n          <strong>Registration Success:</strong>\n          <pre>{JSON.stringify(result, null, 2)}</pre>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TestRegisterPage;"],"names":[],"mappings":"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"}