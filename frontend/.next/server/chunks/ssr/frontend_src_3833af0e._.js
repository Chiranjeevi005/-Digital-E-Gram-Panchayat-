module.exports=[34075,a=>{"use strict";a.s(["apiClient",()=>d]);let b="http://localhost:3002/api",c=async a=>{if(!a.ok){let b=`HTTP error! status: ${a.status}`;try{b=(await a.json()).message||b}catch(c){b=a.statusText||b}throw Error(b)}return a},d={get:async a=>{try{let d=await fetch(`${b}${a}`,{method:"GET",headers:{"Content-Type":"application/json"},credentials:"include"});return await c(d),d.json()}catch(a){if(console.error("API GET request failed:",a),a instanceof TypeError&&"Failed to fetch"===a.message)throw Error("Network error: Unable to connect to the server. Please check if the server is running.");throw a}},post:async(a,d)=>{try{let e=await fetch(`${b}${a}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(d),credentials:"include"});return await c(e),e.json()}catch(a){if(console.error("API POST request failed:",a),a instanceof TypeError&&"Failed to fetch"===a.message)throw Error("Network error: Unable to connect to the server. Please check if the server is running.");throw a}},put:async(a,d)=>{try{let e=await fetch(`${b}${a}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(d),credentials:"include"});return await c(e),e.json()}catch(a){if(console.error("API PUT request failed:",a),a instanceof TypeError&&"Failed to fetch"===a.message)throw Error("Network error: Unable to connect to the server. Please check if the server is running.");throw a}},delete:async a=>{try{let d=await fetch(`${b}${a}`,{method:"DELETE",headers:{},credentials:"include"});return await c(d),d.json()}catch(a){if(console.error("API DELETE request failed:",a),a instanceof TypeError&&"Failed to fetch"===a.message)throw Error("Network error: Unable to connect to the server. Please check if the server is running.");throw a}},download:async a=>{try{let d=await fetch(`${b}${a}`,{headers:{},credentials:"include"});return await c(d),d.blob()}catch(a){if(console.error("API download request failed:",a),a instanceof TypeError&&"Failed to fetch"===a.message)throw Error("Network error: Unable to connect to the server. Please check if the server is running.");throw a}},login:async(a,b,c)=>d.post("/auth/login",{email:a,password:b,userType:c}),register:async(a,b,c)=>d.post("/auth/register",{name:a,email:b,password:c}),getCurrentUser:async()=>d.get("/auth/user/me")}},73108,a=>{"use strict";a.s(["default",()=>e]);var b=a.i(87924),c=a.i(72131),d=a.i(34075);let e=()=>{let[a,e]=(0,c.useState)(null),[f,g]=(0,c.useState)(!1),[h,i]=(0,c.useState)(null),j=async()=>{try{g(!0),i(null);let a=await d.apiClient.getCurrentUser();e(a)}catch(a){i(a instanceof Error?a.message:"Failed to fetch user data"),console.error("Error:",a)}finally{g(!1)}},k=async()=>{try{g(!0),i(null);let a=await d.apiClient.post("/certificates/apply",{applicantName:"Test User",certificateType:"Birth",date:"2023-01-01",place:"Test Place",supportingFiles:[],declaration:!0});e(a)}catch(a){i(a instanceof Error?a.message:"Failed to apply for certificate"),console.error("Error:",a)}finally{g(!1)}};return(0,b.jsxs)("div",{style:{padding:"20px",fontFamily:"Arial, sans-serif"},children:[(0,b.jsx)("h1",{children:"API Test Page"}),(0,b.jsxs)("div",{style:{marginBottom:"20px"},children:[(0,b.jsx)("button",{onClick:j,disabled:f,style:{padding:"10px 20px",marginRight:"10px"},children:f?"Loading...":"Test Get User"}),(0,b.jsx)("button",{onClick:k,disabled:f,style:{padding:"10px 20px"},children:f?"Loading...":"Test Apply Certificate"})]}),h&&(0,b.jsxs)("div",{style:{backgroundColor:"#fee",color:"#c33",padding:"10px",borderRadius:"4px",marginBottom:"20px"},children:[(0,b.jsx)("strong",{children:"Error:"})," ",h]}),a&&(0,b.jsxs)("div",{style:{backgroundColor:"#efe",color:"#363",padding:"10px",borderRadius:"4px"},children:[(0,b.jsx)("strong",{children:"Result:"}),(0,b.jsx)("pre",{children:JSON.stringify(a,null,2)})]})]})}}];

//# sourceMappingURL=frontend_src_3833af0e._.js.map